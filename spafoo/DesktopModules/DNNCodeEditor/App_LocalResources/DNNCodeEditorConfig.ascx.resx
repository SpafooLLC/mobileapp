<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblMenuItems.Text" xml:space="preserve">
    <value>Editor Menu Items</value>
  </data>
  <data name="lblMenuFont.Help" xml:space="preserve">
    <value>Specifies that the button "Font" will be shown in the editor menu.</value>
  </data>
  <data name="lblMenuFont.Text" xml:space="preserve">
    <value>Font</value>
  </data>
  <data name="lblMenuGoToLine.Help" xml:space="preserve">
    <value>Specifies that the button "Go To Line" will be shown in the editor menu.</value>
  </data>
  <data name="lblMenuGoToLine.Text" xml:space="preserve">
    <value>Go To Line</value>
  </data>
  <data name="lblMenuHelp.Help" xml:space="preserve">
    <value>Specifies that the button "Help" will be shown in the editor menu.</value>
  </data>
  <data name="lblMenuHelp.Text" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="lblMenuHighlight.Help" xml:space="preserve">
    <value>Specifies that the button "Highlight" will be shown in the editor menu.&lt;br&gt;&lt;br&gt;

With this button the syntax highlighting can be switched on or off.  To optimize performance, syntax highlighting should be turned off in files containing 1000 lines or more.</value>
  </data>
  <data name="lblMenuHighlight.Text" xml:space="preserve">
    <value>Highlight</value>
  </data>
  <data name="lblMenuRedo.Help" xml:space="preserve">
    <value>Specifies that the button "Redo" will be shown in the editor menu.</value>
  </data>
  <data name="lblMenuRedo.Text" xml:space="preserve">
    <value>ReDo</value>
  </data>
  <data name="lblMenuResetHighlight.Help" xml:space="preserve">
    <value>Specifies that the button "Reset highlight" will be shown in the editor menu.&lt;br&gt;
Resets highlight (if desyncronized from text)</value>
  </data>
  <data name="lblMenuResetHighlight.Text" xml:space="preserve">
    <value>Reset Highlight</value>
  </data>
  <data name="lblMenuSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="lblMenuSearch.Help" xml:space="preserve">
    <value>Specifies that the button "Search" will be shown in the editor menu.</value>
  </data>
  <data name="lblMenuSearch.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="lblMenuSmooth.Help" xml:space="preserve">
    <value>Specifies that the button "Smooth Selection" will be shown in the editor menu.&lt;br&gt;&lt;br&gt;

When syntax highlighting (button "Highlight") is turned off,  you can switch on some display features with this button.</value>
  </data>
  <data name="lblMenuSmooth.Text" xml:space="preserve">
    <value>Smooth Selection</value>
  </data>
  <data name="lblMenuSyntax.Help" xml:space="preserve">
    <value>Specifies that the button "Syntax" will be shown in the editor menu.</value>
  </data>
  <data name="lblMenuSyntax.Text" xml:space="preserve">
    <value>Syntax</value>
  </data>
  <data name="lblMenuUndo.Help" xml:space="preserve">
    <value>Specifies that the button "Undo" will be shown in the editor menu.</value>
  </data>
  <data name="lblMenuUndo.Text" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="lblEditorHeight.Help" xml:space="preserve">
    <value>Specifies the height of the code editor.&lt;br&gt;
Default: 400</value>
  </data>
  <data name="lblEditorHeight.Text" xml:space="preserve">
    <value>Height</value>
  </data>
  <data name="lblEditorWidth.Help" xml:space="preserve">
    <value>Specifies the width of the code editor.&lt;br&gt;
Default: 650</value>
  </data>
  <data name="lblEditorWidth.Text" xml:space="preserve">
    <value>Width</value>
  </data>
  <data name="lblEditorSize.Text" xml:space="preserve">
    <value>Editor Size</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="cmdUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="lblFileManager.Text" xml:space="preserve">
    <value>File Manager</value>
  </data>
  <data name="lblRootDir.Help" xml:space="preserve">
    <value>Specifies the root directory to be displayed in the file manager.
All sub-directories and files in this directory will be displayed in the file manager.</value>
  </data>
  <data name="lblRootDir.Text" xml:space="preserve">
    <value>Root Directory</value>
  </data>
  <data name="lblHiddenExtensions.Help" xml:space="preserve">
    <value>Specifies the not allowable file extensions (separated by commas).&lt;br&gt;
e.g. dll,exe,vbs&lt;br&gt;
These file types do not show up on the file manager and can therefore be neither modified nor deleted.</value>
  </data>
  <data name="lblHiddenExtensions.Text" xml:space="preserve">
    <value>Hide Extensions</value>
  </data>
  <data name="lblMenuSave.Help" xml:space="preserve">
    <value>Specifies that the button "Save" will be shown in the editor menu.</value>
  </data>
</root>